{
  "author": {
    "name": "Jackson Tian",
    "email": "http://weibo.com/shyvo"
  },
  "contributors": [
    {
      "name": "Jackson Tian",
      "email": "http://weibo.com/shyvo"
    },
    {
      "name": "Robert SkÃ¶ld",
      "email": "robert@publicclass.se",
      "url": "http://publicclass.se"
    },
    {
      "name": "Tom Carden",
      "email": "tom@tom-carden.co.uk"
    }
  ],
  "name": "ejs-mate",
  "description": "Express 4.x locals for layout, partial.",
  "version": "2.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/randometc/ejs-mate.git"
  },
  "homepage": "https://github.com/JacksonTian/ejs-mate",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "ejs": "1.0.0"
  },
  "devDependencies": {
    "express": "~3.0.0",
    "mocha": "*",
    "should": "~3.0.0",
    "methods": "0.0.1"
  },
  "scripts": {
    "test": "mocha -r should -R spec"
  },
  "bugs": {
    "url": "https://github.com/JacksonTian/ejs-mate/issues"
  },
  "main": "index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "keywords": [
    "ejs",
    "layout",
    "partial"
  ],
  "license": "MIT",
  "readme": "# ejs-mate\n\n## About\n\nExpress 4.x `layout`, `partial` and `block` template functions for the EJS template engine.\n\nPreviously also offered `include` but you should use EJS 1.0.x's own method for that now.\n\n## Installation\n\n```bash\n$ npm install ejs-mate --save\n```\n\n(`--save` automatically writes to your `package.json` file, tell your friends)\n\n## Usage\n\nRun `node app.js` from `examples` and open `localhost:3000` to see a working example.\n\nGiven a template, `index.ejs`:\n\n```html\n<% layout('boilerplate') -%>\n<h1>I am the <%=what%> template</h1>\n```\n\nAnd a layout, `boilerplate.ejs`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>It's <%=who%></title>\n  </head>\n  <body>\n    <section>\n      <%-body -%>\n    </section>\n  </body>\n</html>\n```\n\nWhen rendered by an Express 4.0 app:\n\n```js\nvar express = require('express'),\n  engine = require('../'),\n  app = express();\n\n// use ejs-locals for all ejs templates:\napp.engine('ejs', engine);\n\napp.set('views',__dirname + '/views');\napp.set('view engine', 'ejs'); // so you can render('index')\n\n// render 'index' into 'boilerplate':\napp.get('/',function(req,res,next){\n  res.render('index', { what: 'best', who: 'me' });\n});\n\napp.listen(3000);\n```\n\nYou get the following result:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>It's me</title>\n  </head>\n  <body>\n    <section>\n      <h1>I am the best template</h1>\n    </section>\n  </body>\n</html>\n```\n\nNote, if you haven't seen it before, this example uses trailing dashes in the EJS includes to slurp trailing whitespace and generate cleaner HTML. It's not strictly necessary.\n\n## Features\n\n### `layout(view)`\n\nWhen called anywhere inside a template, requests that the output of the current template be passed to the given view as the `body` local. Use this to specify layouts from within your template, which is recommended with Express 3.0, since the app-level layout functionality has been removed.\n\n### `partial(name,optionsOrCollection)`\n\nWhen called anywhere inside a template, adds the given view to that template using the current given `optionsOrCollection`. The usual way to use this is to pass an Array as the collection argument. The given view is then executed for each item in the Array; the item is passed into the view as a local with a name generated from the view's filename.\n\nFor example, if you do `<%-partial('thing',things)%>` then each item in the `things` Array is passed to `thing.ejs` with the name `thing`. If you rename the template, the local name of each item will correspond to the template name.\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo, installing the development dependencies:\n\n```bash\n$ npm install -d\n```\n\nthen run the tests:\n\n```bash\n$ npm test\n```\n\n## Whither Include?\n\nPrevious versions of this library had an `include` function. This is now supported directly by EJS, albeit with a different syntax. For `ejs-locals` 1.0+ simply do:\n\n### `<% include path/view %>`\n\nWhen called anywhere inside a template, this adds the given view to that template using the current options and locals. This is built-in to [EJS](https://github.com/visionmedia/ejs) 1.0+.\n\n## Credits\n\nThis library is a fork from Robert Tom Carden's [ejs-locals](https://github.com/RandomEtc/ejs-locals), and the partial function remains relatively untouched from there (aside from cache support). Robert is still updating his library and it now supports other template engines - check it out!\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Robert Sk&ouml;ld &lt;robert@publicclass.se&gt;\nCopyright (c) 2012 Tom Carden &lt;tom@tom-carden.co.uk&gt;\nCopyright (c) 2014 Jackson Tian &lt;shyvo1987@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "ejs-mate@2.0.0",
  "_from": "ejs-mate@2.0.0"
}
