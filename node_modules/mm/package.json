{
  "name": "mm",
  "version": "0.2.1",
  "description": "mock mate, mock http request, fs access and so on.",
  "main": "index.js",
  "scripts": {
    "test": "make test-all"
  },
  "config": {
    "blanket": {
      "pattern": "mm/lib"
    },
    "travis-cov": {
      "threshold": 99
    }
  },
  "dependencies": {
    "muk": "0.3.1",
    "semver": "2.2.1",
    "thunkify": "0.0.1"
  },
  "devDependencies": {
    "autod": "*",
    "blanket": "*",
    "chunkstream": "0.0.1",
    "co": "3.0.4",
    "co-urllib": "0.1.2",
    "contributors": "*",
    "coveralls": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "node-patch": "*",
    "pedding": "0.0.3",
    "should": "3.1.3",
    "travis-cov": "*"
  },
  "homepage": "http://github.com/fengmk2/mm",
  "repository": {
    "type": "git",
    "url": "git://github.com/fengmk2/mm.git"
  },
  "keywords": [
    "mm"
  ],
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://fengmk2.github.com/"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com",
      "url": "https://github.com/dead-horse"
    },
    {
      "name": "AlsoTang",
      "email": "alsotang@gmail.com",
      "url": "https://github.com/alsotang"
    }
  ],
  "readme": "mm (美眉，Mock伴侣) [![Build Status](https://secure.travis-ci.org/fengmk2/mm.png)](http://travis-ci.org/fengmk2/mm) [![Coverage Status](https://coveralls.io/repos/fengmk2/mm/badge.png)](https://coveralls.io/r/fengmk2/mm)\n=======\n\n[![NPM](https://nodei.co/npm/mm.png?downloads=true&stars=true)](https://nodei.co/npm/mm)\n\n![logo](https://raw.github.com/fengmk2/mm/master/logo.png)\n\nmock mate, easy to mock `http` request, `fs` access and so on.\n\nMock伴侣，单元测试必备。\n\n## Install\n\n```bash\n$ npm install mm\n```\n\n## Usage\n\n### Mock `http(s).request()`\n\n```js\nvar mm = require('mm');\nvar http = require('http');\n\nvar mockURL = '/foo';\nvar mockResData = 'mock data';\nvar mockResHeaders = { server: 'mock server' };\nmm.http.request(mockURL, mockResData, mockResHeaders);\nmm.https.request(mockURL, mockResData, mockResHeaders);\n\n// http\nhttp.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.headers); // should be mock headers\n  var body = '';\n  res.on('data', function (chunk) {\n    body += chunk.toString();\n  });\n  res.on('end', function () {\n    console.log(body); // should equal 'mock data'\n  });\n});\n\n// https\nhttps.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.headers); // should be mock headers\n  var body = '';\n  res.on('data', function (chunk) {\n    body += chunk.toString();\n  });\n  res.on('end', function () {\n    console.log(body); // should equal 'mock data'\n  });\n});\n```\n\n### Mock `http(s).request()` error\n\n```js\nvar mm = require('mm');\nvar http = require('http');\n\nvar mockURL = '/foo';\nvar reqError = null;\nvar resError = 'mock res error';\nmm.http.requestError(mockURL, reqError, resError);\n\nvar req = http.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.statusCode, res.headers); // 200 but never emit `end` event\n  res.on('end', fucntion () {\n    console.log('never show this message');\n  });\n});\nreq.on('error', function (err) {\n  console.log(err); // should return mock err: err.name === 'MockHttpResponseError'\n}\n```\n\n### Mock async function callback error\n\n```js\nvar mm = require('mm');\nvar fs = require('fs');\n\nmm.error(fs, 'readFile', 'mock fs.readFile return error');\n\nfs.readFile('/etc/hosts', 'utf8', function (err, content) {\n  console.log(err); // should return mock err: err.name === 'MockError'\n\n  mm.restore(); // remove all mock effects.\n\n  fs.readFile('/etc/hosts', 'utf8', function (err, content) {\n    console.log(err); // should return null\n    console.log(content); // should show the host list\n  });\n});\n```\n\n### Mock `callback(null, data)`\n\n```js\nmm.data(fs, 'readFile', new Buffer('some content'));\n```\n\n### Mock `callback(null, null)`\n\n```js\nmm.empty(mysql, 'query');\n```\n\n### Mock `callback(null, [data1, data2])`\n\n```js\nmm.datas(urllib, 'request', [new Buffer('data'), { headers: { foo: 'bar' } }]);\n```\n\n### use `mm` just like [`muk`](https://github.com/fent/node-muk)\n\n```js\nvar fs = require('fs');\nvar mm = require('mm');\n\nmm(fs, 'readFile', function (path, callback) {\n  process.nextTick(callback.bind(null, null, 'file contents here'));\n});\n```\n\n## Authors\n\n```bash\n$ git summary\n\n project  : mm\n repo age : 1 year, 2 months\n active   : 23 days\n commits  : 55\n files    : 16\n authors  :\n    49  fengmk2                 89.1%\n     4  dead-horse              7.3%\n     1  AlsoTang                1.8%\n     1  Alsotang                1.8%\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 - 2014 fengmk2 &lt;fengmk2@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fengmk2/mm/issues"
  },
  "_id": "mm@0.2.1",
  "_from": "mm@*"
}
